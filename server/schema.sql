
-- SCHEMA for DJ Shop Rigenerato!

-- Categories
create table if not exists categories (
  id bigint generated by default as identity primary key,
  name text not null,
  description text,
  created_at timestamp with time zone default now()
);

-- Products
create table if not exists products (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  price_cents integer not null check (price_cents >= 0),
  stock integer default 0,
  is_active boolean default true,
  category_id bigint references categories(id) on delete set null,
  created_at timestamp with time zone default now()
);

-- Product images
create table if not exists product_images (
  id bigint generated by default as identity primary key,
  product_id bigint references products(id) on delete cascade,
  path text not null, -- storage path inside bucket
  url text not null,
  created_at timestamp with time zone default now()
);

-- Discount codes
create table if not exists discount_codes (
  id bigint generated by default as identity primary key,
  code text unique not null,
  percent_off integer,          -- 0..100
  amount_off_cents integer,     -- fixed discount
  active boolean default true,
  expires_at timestamp with time zone
);

-- Orders
create table if not exists orders (
  id bigint generated by default as identity primary key,
  user_id uuid, -- supabase auth user, nullable (guest checkout)
  customer_email text,
  customer_name text,
  shipping_address jsonb, -- {address, city, zip, country}
  status text default 'pending',
  total_cents integer default 0,
  discount_code_id bigint references discount_codes(id),
  stripe_payment_intent_id text,
  stripe_session_id text,
  created_at timestamp with time zone default now()
);

-- Order items
create table if not exists order_items (
  id bigint generated by default as identity primary key,
  order_id bigint references orders(id) on delete cascade,
  product_id bigint,
  title text,
  quantity integer not null default 1,
  price_cents integer not null default 0,
  image_url text
);

-- Basic RLS (you can tighten as needed)
alter table orders enable row level security;
alter table order_items enable row level security;

-- Orders readable by owner (user_id) OR admin role via postgres policies.
create policy if not exists orders_owner_policy
  on orders for select
  using (
    (auth.uid() = user_id) or
    (auth.jwt() ->> 'app_metadata' like '%"role":"admin"%')
  );

create policy if not exists order_items_owner_policy
  on order_items for select
  using (
    exists (select 1 from orders o where o.id = order_id and (
      o.user_id = auth.uid() or
      (auth.jwt() ->> 'app_metadata' like '%"role":"admin"%')
    ))
  );

-- Admin-only write policies are handled via service-role on the server.


-- Storage policies for bucket 'uploads' (admin-only write; public read is set in Storage UI)
-- Enable RLS on storage.objects (enabled by default in Supabase projects)
-- Allow admins to manage objects within the 'uploads' bucket
create policy if not exists "uploads_admin_all"
on storage.objects
for all
using (
  bucket_id = 'uploads' and (auth.jwt() ->> 'app_metadata') like '%"role":"admin"%'
)
with check (
  bucket_id = 'uploads' and (auth.jwt() ->> 'app_metadata') like '%"role":"admin"%'
);
