-- =========================================================
-- DJ Shop Rigenerato!  —  Schema DB + RLS + Storage policies
-- Supabase (Postgres) compatible
-- =========================================================

-- -----------------------
-- CATEGORIES
-- -----------------------
create table if not exists categories (
  id            bigint generated by default as identity primary key,
  name          text not null,
  description   text,
  created_at    timestamptz default now()
);

-- -----------------------
-- PRODUCTS
-- -----------------------
create table if not exists products (
  id            bigint generated by default as identity primary key,
  title         text not null,
  description   text,
  price_cents   integer not null check (price_cents >= 0),
  stock         integer default 0,
  is_active     boolean default true,
  category_id   bigint references categories(id) on delete set null,
  created_at    timestamptz default now()
);

-- -----------------------
-- PRODUCT IMAGES
-- -----------------------
create table if not exists product_images (
  id          bigint generated by default as identity primary key,
  product_id  bigint references products(id) on delete cascade,
  path        text not null,  -- storage path within bucket
  url         text not null,
  created_at  timestamptz default now()
);

-- -----------------------
-- DISCOUNT CODES
-- -----------------------
create table if not exists discount_codes (
  id                 bigint generated by default as identity primary key,
  code               text unique not null,
  percent_off        integer,          -- 0..100
  amount_off_cents   integer,          -- fixed discount (in cents)
  active             boolean default true,
  expires_at         timestamptz
);

-- -----------------------
-- ORDERS
-- -----------------------
create table if not exists orders (
  id                       bigint generated by default as identity primary key,
  user_id                  uuid,  -- supabase auth user; nullable (guest)
  customer_email           text,
  customer_name            text,
  shipping_address         jsonb, -- {address, city, zip, country}
  status                   text default 'pending',
  total_cents              integer default 0,
  discount_code_id         bigint references discount_codes(id),
  stripe_payment_intent_id text,
  stripe_session_id        text,
  created_at               timestamptz default now()
);

-- -----------------------
-- ORDER ITEMS
-- -----------------------
create table if not exists order_items (
  id          bigint generated by default as identity primary key,
  order_id    bigint references orders(id) on delete cascade,
  product_id  bigint,
  title       text,
  quantity    integer not null default 1,
  price_cents integer not null default 0,
  image_url   text
);

-- =========================================================
-- RLS (Row Level Security)
-- =========================================================

-- Enable RLS on orders and order_items
alter table orders enable row level security;
alter table order_items enable row level security;

-- Drop then create policies to avoid name collisions on re-run
drop policy if exists orders_owner_policy on orders;
create policy orders_owner_policy
  on orders
  for select
  using (
    (auth.uid() = user_id)
    or (auth.jwt() ->> 'app_metadata' like '%"role":"admin"%')
  );

drop policy if exists order_items_owner_policy on order_items;
create policy order_items_owner_policy
  on order_items
  for select
  using (
    exists (
      select 1
      from orders o
      where o.id = order_id
        and (
          o.user_id = auth.uid()
          or (auth.jwt() ->> 'app_metadata' like '%"role":"admin"%')
        )
    )
  );

-- NOTE:
-- Le operazioni "write" lato admin vengono eseguite dal server
-- usando la SERVICE ROLE KEY, quindi non servono policy di insert/update/delete
-- lato client per queste tabelle.

-- =========================================================
-- STORAGE POLICIES (bucket: uploads)
-- =========================================================
-- In Supabase → Storage crea un bucket chiamato `uploads`
-- e rendilo Public per la lettura (così le immagini sono visibili).
-- Qui abilitiamo l'admin a gestire tutti gli oggetti del bucket via token.

-- storage.objects ha già RLS attivo di default nei nuovi progetti.
drop policy if exists uploads_admin_all on storage.objects;
create policy uploads_admin_all
  on storage.objects
  for all
  using (
    bucket_id = 'uploads'
    and (auth.jwt() ->> 'app_metadata' like '%"role":"admin"%')
  )
  with check (
    bucket_id = 'uploads'
    and (auth.jwt() ->> 'app_metadata' like '%"role":"admin"%')
  );
